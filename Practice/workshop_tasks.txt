Practice 1. 18.02.2020:

- створити директорію для проекту, елементарний index.html + script.js
    - навчитись працювати з static file server
        - заінсталювати Node + NPM
        - заінсталювати і запустити http-server
            - зрозуміти, з якої папки сервер видає файли
            - розібратись, як працює кешування (пересвідчитись, що script.js не перезавантажується після змін)
            - навчитись відключати кеш на сервері (прапорець -c-1) і в браузері (disable cache)
            - перевірити, що script.js почав правильно перезавантажуватись
        - дослідити, як працює static server, вбудований в улюблену IDE
    - навчитись працювати в REPL від Babel: https://babeljs.io/repl
        - поекспериментувати з кусками JS-коду, який містить в собі "недозволені" частинки HTML
        - подивитись, як формуєтся "дозволений" JS-код

----------------------------------------------------------------------

Practice 2. 20.02.2020:

    - запустити аплікацію з JSX (використовуючи babel-standalone)
    - написати програму, яка, використовуючи JSX, рендерить на сторінці пост
        - визначити 5 змінних: автор, аватарка, дата, картинка, текст
        - прорендерити подобіє FB поста, використовуючи дані зі змінних
    - рефакторинг
        - винести код, який формує JSX, в окрему функцію
        - функція має приймати 5 відповідних аргументів
        - прорендерити два різних поста з різними даними
        - зробити так, щоб картинка була optional (в одному з постів щоб її не було)

----------------------------------------------------------------------

Practice 3. 25.02.2020:

    - почати рендерити пости списком		(*users from jsonplaceholder)
        - додати більше постів (більше 5)
        - прописати правильні ключі
    - додати ще одну змінну: sortType
        - вона приймає значення: 'byAuthorName', 'byDate'		(*users name, city)
        - визначити значення через константи
        - додати функцію, яка задає значення
    - додати зверху дві кнопки, які встановлюють сортування
        - сортувати список
        - підсвічувати активну кнопку

----------------------------------------------------------------------

Practice 4. 27.02.2020:

    - переорганізувати код в функціональні компоненти
    - рендерити список постів через render prop
        - компонента Posts приймає renderPost через props
    - організувати one-way data flow
        - кожна компонента має користуватись тільки своїми props і більше нічим
        - дані і колбеки пожуть потрапляти тільки через кореневу компоненту <App />
    - додатковий варіант: прокидати дані і колбеки через Context API

----------------------------------------------------------------------

Practice 5. 03.03.2020:

    - закріплення навиків роботи з:
        - функціональними компонентами
        - render props
        - передача даних і колбеків one-way
        - Context API
    - на прикладі задач:
        - можливість ставити і бачити власні лайки до постів
        - переорганізація UI у вигляді поштового клієнта
            - зліва — список заголовків
            - справа — деталі вибраного поста

----------------------------------------------------------------------



Practice 7. 10.03.2020:

    - задача для апки-поштового клієнта
        - на початку всі листи "непрочитані"
        - якщо ми виділяємо якийсь лист в списку,
          і він відображається в правій панелі,
          то він має стати "прочитаним", якщо ми на нього
          дивимся більше, ніж 2 секунди
        - якщо ми відкрили лист в поповері (через 
          дабл-клік), то він позначається як "прочитаний"
          негайно